#!/bin/bash

# Production Deployment Script for Materials Orchestrator
# Generated by Autonomous SDLC Execution

set -e

echo "🚀 Starting Materials Orchestrator Production Deployment"
echo "========================================================="

# Check prerequisites
echo "🔍 Checking prerequisites..."

if ! command -v python3 &> /dev/null; then
    echo "❌ Python 3 is required"
    exit 1
fi

if ! command -v docker &> /dev/null; then
    echo "⚠️ Docker not found - container features will be unavailable"
fi

echo "✅ Prerequisites checked"

# Create production virtual environment
echo "📦 Setting up production environment..."

if [ ! -d "venv_prod" ]; then
    python3 -m venv venv_prod
    echo "✅ Virtual environment created"
else
    echo "✅ Virtual environment exists"
fi

# Activate virtual environment
source venv_prod/bin/activate

# Install production dependencies
echo "📥 Installing production dependencies..."
pip install --upgrade pip
pip install numpy scipy pandas scikit-learn pymongo streamlit plotly pydantic fastapi uvicorn httpx typer psutil

# Install the package
pip install -e .

echo "✅ Dependencies installed"

# Run health check
echo "🏥 Running system health check..."
python3 -c "
import sys
from pathlib import Path
sys.path.insert(0, str(Path('.').resolve() / 'src'))

from materials_orchestrator import AutonomousLab
from materials_orchestrator.enhanced_validation import create_robust_validation_system
from materials_orchestrator.advanced_security import create_advanced_security_system
from materials_orchestrator.comprehensive_monitoring import create_comprehensive_monitoring
from materials_orchestrator.ultra_high_performance import create_ultra_high_performance_system

print('🧪 Testing all systems...')

try:
    # Test core system
    lab = AutonomousLab(robots=['prod_robot'], instruments=['prod_instrument'])
    print('✅ Core system: OK')
    
    # Test validation
    validator, error_handler = create_robust_validation_system()
    print('✅ Validation system: OK')
    
    # Test security
    security = create_advanced_security_system()
    print('✅ Security system: OK')
    
    # Test monitoring
    monitoring, alerts = create_comprehensive_monitoring()
    monitoring.stop_monitoring()
    print('✅ Monitoring system: OK')
    
    # Test performance
    cache, lb, proc, scaler = create_ultra_high_performance_system()
    proc.shutdown()
    print('✅ Performance system: OK')
    
    print('🎉 All systems operational!')
    
except Exception as e:
    print(f'❌ Health check failed: {e}')
    exit(1
"

if [ $? -eq 0 ]; then
    echo "✅ Health check passed"
else
    echo "❌ Health check failed"
    exit 1
fi

# Create production configuration
echo "⚙️ Creating production configuration..."
cat > config_production.json << EOF
{
    "environment": "production",
    "debug": false,
    "database": {
        "url": "mongodb://localhost:27017/",
        "database": "materials_discovery_prod"
    },
    "security": {
        "level": "high",
        "enable_authentication": true,
        "enable_authorization": true,
        "session_timeout": 3600
    },
    "performance": {
        "cache_size_mb": 2000,
        "max_workers": 32,
        "auto_scaling": true,
        "target_utilization": 0.75
    },
    "monitoring": {
        "enabled": true,
        "metrics_retention_days": 30,
        "alerting": true
    },
    "api": {
        "host": "0.0.0.0",
        "port": 8000,
        "cors_origins": ["*"]
    }
}
EOF

echo "✅ Production configuration created"

# Create startup script
echo "🚀 Creating startup script..."
cat > start_production.sh << 'EOF'
#!/bin/bash
# Production startup script

echo "🚀 Starting Materials Orchestrator in Production Mode"

# Activate virtual environment
source venv_prod/bin/activate

# Export production environment
export MATERIALS_ENV=production
export MATERIALS_CONFIG=config_production.json

# Start the API server
python3 -c "
import uvicorn
from materials_orchestrator.api import app

print('🌐 Starting production API server...')
uvicorn.run(
    app, 
    host='0.0.0.0', 
    port=8000, 
    workers=4,
    log_level='info'
)
"
EOF

chmod +x start_production.sh

echo "✅ Startup script created"

# Create Docker configuration if Docker is available
if command -v docker &> /dev/null; then
    echo "🐳 Creating Docker configuration..."
    
    cat > Dockerfile.production << 'EOF'
FROM python:3.9-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements-dev.txt .
RUN pip install --no-cache-dir -r requirements-dev.txt

# Copy application code
COPY src/ ./src/
COPY config_production.json .

# Install the package
RUN pip install -e .

# Create non-root user
RUN useradd -m -u 1000 materials && chown -R materials:materials /app
USER materials

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python3 -c "from materials_orchestrator import AutonomousLab; print('OK')" || exit 1

# Start command
CMD ["python3", "-c", "import uvicorn; from materials_orchestrator.api import app; uvicorn.run(app, host='0.0.0.0', port=8000)"]
EOF

    echo "✅ Dockerfile created"
    
    # Create docker-compose for production
    cat > docker-compose.production.yml << 'EOF'
version: '3.8'

services:
  materials-orchestrator:
    build:
      context: .
      dockerfile: Dockerfile.production
    ports:
      - "8000:8000"
    environment:
      - MATERIALS_ENV=production
      - MATERIALS_CONFIG=config_production.json
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - mongodb
    restart: unless-stopped
    
  mongodb:
    image: mongo:5.0
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=changeme
    restart: unless-stopped
    
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped
    
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=changeme
    restart: unless-stopped

volumes:
  mongodb_data:
  grafana_data:
EOF

    echo "✅ Docker Compose configuration created"
fi

# Create monitoring configuration
echo "📊 Creating monitoring configuration..."
mkdir -p monitoring

cat > monitoring/prometheus.yml << 'EOF'
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'materials-orchestrator'
    static_configs:
      - targets: ['materials-orchestrator:8000']
    scrape_interval: 5s
    metrics_path: /metrics
EOF

echo "✅ Monitoring configuration created"

# Summary
echo ""
echo "🎉 Production Deployment Ready!"
echo "==============================="
echo ""
echo "📝 Next Steps:"
echo "   1. Review and update config_production.json"
echo "   2. Set up MongoDB (if not using Docker)"
echo "   3. Configure SSL/TLS certificates"
echo "   4. Run: ./start_production.sh"
echo ""
echo "🐳 Docker Deployment (if available):"
echo "   docker-compose -f docker-compose.production.yml up -d"
echo ""
echo "🔗 Access Points:"
echo "   - API: http://localhost:8000"
echo "   - Docs: http://localhost:8000/docs"
echo "   - Metrics: http://localhost:8000/metrics"
echo "   - Grafana: http://localhost:3000 (admin/changeme)"
echo ""
echo "✅ Materials Orchestrator ready for production!"