# Multi-stage Dockerfile for production deployment
# Stage 1: Build stage
FROM python:3.11-slim as builder

# Set build arguments
ARG BUILD_DATE
ARG VERSION
ARG VCS_REF

# Labels for image metadata
LABEL org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.version=$VERSION \
      org.opencontainers.image.revision=$VCS_REF \
      org.opencontainers.image.title="Materials Orchestrator" \
      org.opencontainers.image.description="Self-Driving Materials Discovery Platform" \
      org.opencontainers.image.source="https://github.com/danieleschmidt/self-driving-materials-orchestrator" \
      org.opencontainers.image.vendor="Terragon Labs" \
      org.opencontainers.image.licenses="MIT"

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libffi-dev \
    libssl-dev \
    pkg-config \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy and install Python dependencies
COPY pyproject.toml README.md LICENSE ./
COPY src/ ./src/

# Install dependencies and application
RUN pip install --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -e . && \
    pip install --no-cache-dir gunicorn uvicorn[standard] && \
    pip cache purge

# Stage 2: Runtime stage
FROM python:3.11-slim as runtime

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user
RUN groupadd -r materials && useradd -r -g materials -s /bin/bash materials

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy application code
COPY --from=builder /src /app/src
COPY --chown=materials:materials configs/ /app/configs/

# Create necessary directories
RUN mkdir -p /app/data /app/logs /app/backups && \
    chown -R materials:materials /app

# Set working directory
WORKDIR /app

# Switch to non-root user
USER materials

# Expose ports
EXPOSE 8000 8501

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Use gunicorn for production
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "4", "--worker-class", "uvicorn.workers.UvicornWorker", "--access-logfile", "-", "--error-logfile", "-", "materials_orchestrator.api:app"]

# Stage 3: Development stage
FROM runtime as development

# Switch back to root for development tool installation
USER root

# Install development dependencies
RUN apt-get update && apt-get install -y \
    git \
    vim \
    tmux \
    htop \
    && rm -rf /var/lib/apt/lists/*

# Install development Python packages
RUN pip install --no-cache-dir \
    pytest \
    pytest-cov \
    pytest-asyncio \
    black \
    ruff \
    mypy \
    pre-commit \
    ipython \
    jupyter

# Copy additional development files
COPY tests/ /app/tests/
COPY .pre-commit-config.yaml .editorconfig .gitignore /app/

# Switch back to materials user
USER materials

# Development command with auto-reload
CMD ["uvicorn", "materials_orchestrator.api:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--log-level", "debug"]