# Production Docker Compose for Self-Driving Materials Orchestrator
version: '3.8'

services:
  # Main application with production settings
  materials-orchestrator:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VERSION: ${VERSION:-latest}
        VCS_REF: ${VCS_REF:-$(git rev-parse HEAD)}
    image: materials-orchestrator:${VERSION:-latest}
    container_name: materials-orchestrator-prod
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "8501:8501"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - MONGODB_URL=mongodb://mongodb:27017/materials_discovery
      - REDIS_URL=redis://redis:6379/0
      - API_SECRET_KEY=${API_SECRET_KEY}
      - MONGODB_USERNAME=${MONGODB_USERNAME}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - app_configs:/app/configs:ro
    depends_on:
      - mongodb
      - redis
    networks:
      - materials-network
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # MongoDB with authentication and replication
  mongodb:
    image: mongo:5.0
    container_name: materials-mongodb-prod
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=materials_discovery
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./scripts/init-mongo-prod.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - ./mongodb/mongod.conf:/etc/mongod.conf:ro
    command: mongod --config /etc/mongod.conf
    networks:
      - materials-network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Redis with persistence
  redis:
    image: redis:7-alpine
    container_name: materials-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    networks:
      - materials-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Nginx reverse proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: materials-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - materials-orchestrator
    networks:
      - materials-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: materials-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - materials-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: materials-grafana-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=${POSTGRES_USER}
      - GF_DATABASE_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/:/etc/grafana/provisioning/:ro
    depends_on:
      - prometheus
      - postgres
    networks:
      - materials-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # PostgreSQL for Grafana metadata
  postgres:
    image: postgres:13-alpine
    container_name: materials-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=grafana
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - materials-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Backup service
  backup:
    image: alpine:latest
    container_name: materials-backup-prod
    restart: unless-stopped
    environment:
      - BACKUP_INTERVAL=${BACKUP_INTERVAL:-24h}
      - BACKUP_RETENTION=${BACKUP_RETENTION:-30}
    volumes:
      - app_data:/data/app:ro
      - mongodb_data:/data/mongodb:ro
      - backup_storage:/backups
      - ./scripts/backup.sh:/usr/local/bin/backup.sh:ro
    command: >
      sh -c "
        apk add --no-cache mongodb-tools curl &&
        while true; do
          /usr/local/bin/backup.sh
          sleep ${BACKUP_INTERVAL:-24h}
        done
      "
    depends_on:
      - mongodb
    networks:
      - materials-network

volumes:
  # Application data
  app_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}
  
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./logs}
  
  app_configs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CONFIGS_PATH:-./configs}

  # Database data
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local

  # Monitoring data
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

  # Infrastructure
  nginx_logs:
    driver: local
  backup_storage:
    driver: local

networks:
  materials-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16

# Production configuration profiles
x-logging:
  &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  materials-orchestrator:
    logging: *default-logging
  mongodb:
    logging: *default-logging
  redis:
    logging: *default-logging
  nginx:
    logging: *default-logging
  prometheus:
    logging: *default-logging
  grafana:
    logging: *default-logging