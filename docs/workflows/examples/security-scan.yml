# GitHub Actions Security Scanning Workflow Template
# This file should be copied to .github/workflows/security-scan.yml

name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # ===============================================
  # STATIC APPLICATION SECURITY TESTING (SAST)
  # ===============================================
  sast:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety semgrep

      - name: Run Bandit security linter
        run: |
          bandit -r src/ \
            -f json \
            -o bandit-results.json \
            -ll \
            --exclude tests/

      - name: Convert Bandit results to SARIF
        uses: microsoft/bandit-sarif@v1
        with:
          bandit-results: bandit-results.json
          sarif-results: bandit.sarif

      - name: Upload Bandit SARIF
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: bandit.sarif

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
            p/django
            p/flask

  # ===============================================
  # DEPENDENCY VULNERABILITY SCANNING
  # ===============================================
  dependency-scan:
    name: Dependency Vulnerabilities
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install pip-audit
        run: pip install pip-audit

      - name: Scan dependencies with pip-audit
        run: |
          pip-audit \
            --requirement pyproject.toml \
            --format=json \
            --output=pip-audit-results.json

      - name: Run Safety check
        run: |
          pip install safety
          safety check \
            --json \
            --output safety-results.json \
            --continue-on-error

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-scan-results
          path: |
            pip-audit-results.json
            safety-results.json

  # ===============================================
  # SECRET SCANNING
  # ===============================================
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # ===============================================
  # CONTAINER SECURITY SCANNING
  # ===============================================
  container-scan:
    name: Container Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t materials-orchestrator:security-scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'materials-orchestrator:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk to check Docker image
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: materials-orchestrator:security-scan
          args: --severity-threshold=high

      - name: Run Docker Scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: materials-orchestrator:security-scan
          sarif-file: scout-results.sarif

      - name: Upload Scout results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: scout-results.sarif

  # ===============================================
  # INFRASTRUCTURE AS CODE SCANNING
  # ===============================================
  iac-scan:
    name: Infrastructure Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,kubernetes,docker_compose
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: checkov-results.sarif

      - name: Run Terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'docker'
          iac_version: 'v1'
          policy_type: 'docker'
          only_warn: true
          sarif_upload: true

  # ===============================================
  # LICENSE COMPLIANCE
  # ===============================================
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install pip-licenses
        run: pip install pip-licenses

      - name: Check licenses
        run: |
          pip install -e .
          pip-licenses \
            --format=json \
            --output-file=licenses.json \
            --allow-only="MIT;BSD;Apache;Apache 2.0;Apache Software License;ISC;Mozilla Public License 2.0 (MPL 2.0)"

      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: licenses.json

  # ===============================================
  # DYNAMIC APPLICATION SECURITY TESTING (DAST)
  # ===============================================
  dast:
    name: Dynamic Security Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    services:
      materials-orchestrator:
        image: materials-orchestrator:latest
        ports:
          - 8000:8000
        env:
          SIMULATION_MODE: true
          DEBUG: false

    steps:
      - name: Wait for application to start
        run: |
          sleep 30
          curl -f http://localhost:8000/health || exit 1

      - name: Run OWASP ZAP
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'http://localhost:8000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Run Nuclei
        uses: projectdiscovery/nuclei-action@main
        with:
          target: http://localhost:8000
          templates: 'exposures,misconfiguration,vulnerabilities'

  # ===============================================
  # COMPLIANCE AND GOVERNANCE
  # ===============================================
  compliance:
    name: Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check SLSA compliance
        uses: slsa-framework/slsa-verifier@v2.4.0
        with:
          source-uri: github.com/${{ github.repository }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: .
          format: spdx-json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

      - name: Check security policy
        run: |
          if [ ! -f SECURITY.md ]; then
            echo "::error::SECURITY.md file is missing"
            exit 1
          fi

      - name: Validate Code of Conduct
        run: |
          if [ ! -f CODE_OF_CONDUCT.md ]; then
            echo "::error::CODE_OF_CONDUCT.md file is missing"
            exit 1
          fi

  # ===============================================
  # SECURITY REPORT GENERATION
  # ===============================================
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [sast, dependency-scan, secret-scan, container-scan, iac-scan, license-scan, compliance]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate security summary
        run: |
          echo "# 🔒 Security Scan Results" > security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Status" >> security-summary.md
          echo "" >> security-summary.md
          
          if [ "${{ needs.sast.result }}" == "success" ]; then
            echo "✅ Static Analysis - No critical issues found" >> security-summary.md
          else
            echo "❌ Static Analysis - Issues detected" >> security-summary.md
          fi
          
          if [ "${{ needs.dependency-scan.result }}" == "success" ]; then
            echo "✅ Dependency Scan - No vulnerabilities found" >> security-summary.md
          else
            echo "❌ Dependency Scan - Vulnerabilities detected" >> security-summary.md
          fi
          
          if [ "${{ needs.secret-scan.result }}" == "success" ]; then
            echo "✅ Secret Scan - No secrets detected" >> security-summary.md
          else
            echo "❌ Secret Scan - Potential secrets found" >> security-summary.md
          fi
          
          if [ "${{ needs.container-scan.result }}" == "success" ]; then
            echo "✅ Container Scan - No critical vulnerabilities" >> security-summary.md
          else
            echo "❌ Container Scan - Vulnerabilities detected" >> security-summary.md
          fi
          
          if [ "${{ needs.iac-scan.result }}" == "success" ]; then
            echo "✅ Infrastructure Scan - Configuration secure" >> security-summary.md
          else
            echo "❌ Infrastructure Scan - Misconfigurations found" >> security-summary.md
          fi
          
          if [ "${{ needs.license-scan.result }}" == "success" ]; then
            echo "✅ License Compliance - All licenses approved" >> security-summary.md
          else
            echo "❌ License Compliance - Unapproved licenses found" >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "## Recommendations" >> security-summary.md
          echo "" >> security-summary.md
          echo "- Review all detected issues in the Security tab" >> security-summary.md
          echo "- Update dependencies with known vulnerabilities" >> security-summary.md
          echo "- Address any container vulnerabilities before deployment" >> security-summary.md
          echo "- Ensure secrets are properly managed with GitHub Secrets" >> security-summary.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-summary.md

      - name: Comment on PR with security results
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

# ===============================================
# SECURITY WORKFLOW CONFIGURATION
# ===============================================
concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true