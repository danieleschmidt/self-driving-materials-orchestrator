# Security Scanning Workflow Template
# This file should be copied to .github/workflows/security-scan.yml
#
# Comprehensive security scanning including SLSA compliance

name: Security Scan

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  # SAST (Static Application Security Testing)
  sast:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install bandit[toml] semgrep safety
        
    - name: Run Bandit security scanner
      run: |
        bandit -r src/ -f json -o bandit-results.json
        bandit -r src/ -f sarif -o bandit-results.sarif
      continue-on-error: true
      
    - name: Run Semgrep
      run: |
        semgrep --config=auto --json --output=semgrep-results.json src/
        semgrep --config=auto --sarif --output=semgrep-results.sarif src/
      continue-on-error: true
      
    - name: Upload Bandit results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: bandit-results.sarif
        category: bandit
        
    - name: Upload Semgrep results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep-results.sarif
        category: semgrep
        
    - name: Upload SAST artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: sast-results
        path: |
          bandit-results.json
          semgrep-results.json

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install safety pip-audit cyclonedx-bom
        
    - name: Run Safety check
      run: |
        safety check --json --output safety-results.json
        safety check --output text
      continue-on-error: true
      
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-results.json
        pip-audit --format=cyclonedx-json --output=sbom-pip.json
      continue-on-error: true
      
    - name: Generate Python SBOM
      run: |
        cyclonedx-py -o sbom-python.json
        
    - name: Run Snyk vulnerability scan
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --json --json-file-output=snyk-results.json
      continue-on-error: true
      
    - name: Upload dependency scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-scan-results
        path: |
          safety-results.json
          pip-audit-results.json
          sbom-pip.json
          sbom-python.json
          snyk-results.json

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t materials-orchestrator:security-scan .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'materials-orchestrator:security-scan'
        format: 'json'
        output: 'trivy-results.json'
        
    - name: Run Trivy SARIF scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'materials-orchestrator:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Generate container SBOM
      uses: anchore/sbom-action@v0
      with:
        image: 'materials-orchestrator:security-scan'
        format: spdx-json
        output-file: sbom-container.spdx.json
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: trivy
        
    - name: Upload container scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:  
        name: container-scan-results
        path: |
          trivy-results.json
          sbom-container.spdx.json

  # Infrastructure security scanning
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Checkov for IaC security
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile,kubernetes,secrets
        output_format: json
        output_file_path: checkov-results.json
        
    - name: Run Checkov SARIF scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile,kubernetes,secrets
        output_format: sarif
        output_file_path: checkov-results.sarif
        
    - name: Scan Kubernetes manifests
      run: |
        if [ -d "k8s/" ]; then
          # Install kubesec
          curl -sSX GET "https://api.github.com/repos/controlplaneio/kubesec/releases/latest" \
            | grep -o '"tag_name": "[^"]*' \
            | grep -o '[^"]*$' \
            | xargs -I {} wget "https://github.com/controlplaneio/kubesec/releases/download/{}/kubesec_linux_amd64.tar.gz"
          tar -xzf kubesec_linux_amd64.tar.gz
          chmod +x kubesec
          
          # Scan Kubernetes files
          find k8s/ -name "*.yaml" -o -name "*.yml" | xargs -I {} ./kubesec scan {} > kubesec-results.json
        fi
        
    - name: Upload Checkov results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif
        category: checkov
        
    - name: Upload infrastructure scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: infrastructure-scan-results
        path: |
          checkov-results.json
          kubesec-results.json

  # Secrets detection
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for secret scanning
        
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_ENABLE_COMMENTS: true
        
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified --json --output trufflehog-results.json
        
    - name: Upload secrets scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: secrets-scan-results
        path: |
          trufflehog-results.json

  # License compliance scanning
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pip-licenses licensecheck
        
    - name: Check Python licenses
      run: |
        pip-licenses --format=json --output-file=python-licenses.json
        pip-licenses --format=csv --output-file=python-licenses.csv
        
    - name: Run license compatibility check
      run: |
        licensecheck --format json --output licensecheck-results.json
      continue-on-error: true
      
    - name: Upload license scan results
      uses: actions/upload-artifact@v3
      with:
        name: license-scan-results
        path: |
          python-licenses.json
          python-licenses.csv
          licensecheck-results.json

  # Security report aggregation
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [sast, dependency-scan, container-scan, infrastructure-scan, secrets-scan, license-scan]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all scan results
      uses: actions/download-artifact@v3
      
    - name: Generate security report
      run: |
        python scripts/generate_security_report.py \
          --sast sast-results/ \
          --dependency dependency-scan-results/ \
          --container container-scan-results/ \
          --infrastructure infrastructure-scan-results/ \
          --secrets secrets-scan-results/ \
          --license license-scan-results/ \
          --output security-report.md
      continue-on-error: true
      
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md
        
    - name: Comment security report on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const report = fs.readFileSync('security-report.md', 'utf8');
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Security Scan Results\n\n${report}`
            });
          } catch (error) {
            console.log('Security report not found or error creating comment:', error);
          }

  # SLSA provenance generation
  slsa-provenance:
    name: SLSA Provenance
    runs-on: ubuntu-latest
    permissions:
      actions: read
      id-token: write
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate SLSA provenance
      uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.7.0
      with:
        base64-subjects: "${{ needs.build.outputs.digest }}"
        provenance-name: "materials-orchestrator-provenance.intoto.jsonl"
        
    - name: Upload provenance
      uses: actions/upload-artifact@v3
      with:
        name: slsa-provenance
        path: materials-orchestrator-provenance.intoto.jsonl

  # Security notification
  notify-security:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [security-report]
    if: always() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Send security report to team
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        channel: '#security'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        custom_payload: |
          {
            text: "🔒 Daily Security Scan Complete",
            attachments: [{
              color: "good",
              fields: [{
                title: "Repository",
                value: "${{ github.repository }}",
                short: true
              }, {
                title: "Scan Date",
                value: "${{ github.event.head_commit.timestamp }}",
                short: true
              }, {
                title: "Results",
                value: "Security scan artifacts available in workflow run",
                short: false
              }]
            }]
          }