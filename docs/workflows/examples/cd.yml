# GitHub Actions CD Workflow Template
# This file should be copied to .github/workflows/cd.yml

name: Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===============================================
  # BUILD AND PUSH CONTAINER IMAGES
  # ===============================================
  build:
    name: Build & Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(git describe --tags --always --dirty)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push production image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ env.VERSION }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set image output
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}" >> $GITHUB_OUTPUT

      - name: Generate SLSA provenance
        uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.9.0
        with:
          image: ${{ steps.image.outputs.image }}
          digest: ${{ steps.build.outputs.digest }}

  # ===============================================
  # SECURITY SCANNING
  # ===============================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check critical vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image }}
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  # ===============================================
  # STAGING DEPLOYMENT
  # ===============================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.materials-orchestrator.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig
          export IMAGE_TAG=${{ needs.build.outputs.version }}
          
          # Update deployment image
          kubectl set image deployment/materials-orchestrator \
            materials-orchestrator=${{ needs.build.outputs.image }} \
            -n materials-staging
          
          # Wait for rollout
          kubectl rollout status deployment/materials-orchestrator \
            -n materials-staging \
            --timeout=600s

      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          sleep 30
          
          # Run basic health checks
          curl -f https://staging.materials-orchestrator.com/health
          curl -f https://staging.materials-orchestrator.com/api/v1/status

      - name: Run integration tests against staging
        run: |
          pip install -e ".[dev]"
          STAGING_URL=https://staging.materials-orchestrator.com \
          pytest tests/integration/ -m "staging" --tb=short

  # ===============================================
  # PRODUCTION DEPLOYMENT
  # ===============================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://materials-orchestrator.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl for production
        run: |
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Pre-deployment backup
        run: |
          export KUBECONFIG=kubeconfig
          
          # Backup database
          kubectl create job backup-$(date +%Y%m%d-%H%M%S) \
            --from=cronjob/database-backup \
            -n materials-production

      - name: Blue-Green Deployment
        run: |
          export KUBECONFIG=kubeconfig
          export IMAGE_TAG=${{ needs.build.outputs.version }}
          
          # Create new deployment with green tag
          kubectl patch deployment materials-orchestrator \
            -p '{"spec":{"template":{"metadata":{"labels":{"version":"green"}}}}}' \
            -n materials-production
          
          # Update image
          kubectl set image deployment/materials-orchestrator \
            materials-orchestrator=${{ needs.build.outputs.image }} \
            -n materials-production
          
          # Wait for rollout
          kubectl rollout status deployment/materials-orchestrator \
            -n materials-production \
            --timeout=600s

      - name: Production smoke tests
        run: |
          # Wait for service to be ready
          sleep 60
          
          # Run comprehensive health checks
          curl -f https://materials-orchestrator.com/health
          curl -f https://materials-orchestrator.com/api/v1/status
          curl -f https://materials-orchestrator.com/metrics

      - name: Validate production deployment
        run: |
          pip install -e ".[dev]"
          PRODUCTION_URL=https://materials-orchestrator.com \
          pytest tests/integration/ -m "production" --tb=short

      - name: Switch traffic to green deployment
        if: success()
        run: |
          export KUBECONFIG=kubeconfig
          
          # Update service selector to green
          kubectl patch service materials-orchestrator \
            -p '{"spec":{"selector":{"version":"green"}}}' \
            -n materials-production

      - name: Cleanup old deployment
        if: success()
        run: |
          export KUBECONFIG=kubeconfig
          
          # Remove blue label after successful green deployment
          sleep 300  # Wait 5 minutes for traffic to stabilize
          kubectl patch deployment materials-orchestrator \
            -p '{"spec":{"template":{"metadata":{"labels":{"version":null}}}}}' \
            -n materials-production

  # ===============================================
  # ROLLBACK CAPABILITY
  # ===============================================
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [deploy-staging, deploy-production]
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: Rollback deployment
        run: |
          ENV="${{ github.event.inputs.environment || 'staging' }}"
          
          if [ "$ENV" = "production" ]; then
            KUBECONFIG_SECRET="${{ secrets.PRODUCTION_KUBECONFIG }}"
            NAMESPACE="materials-production"
          else
            KUBECONFIG_SECRET="${{ secrets.STAGING_KUBECONFIG }}"
            NAMESPACE="materials-staging"
          fi
          
          echo "$KUBECONFIG_SECRET" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Rollback to previous version
          kubectl rollout undo deployment/materials-orchestrator -n $NAMESPACE
          kubectl rollout status deployment/materials-orchestrator -n $NAMESPACE

  # ===============================================
  # POST-DEPLOYMENT TASKS
  # ===============================================
  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success() && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Update documentation
        run: |
          # Trigger documentation update
          curl -X POST \
            -H "Authorization: token ${{ secrets.DOCS_DEPLOY_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{"event_type":"docs-update","client_payload":{"version":"${{ needs.build.outputs.version }}"}}'

      - name: Notify stakeholders
        run: |
          # Send deployment notification
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{"text":"🚀 Materials Orchestrator ${{ needs.build.outputs.version }} deployed to production"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Update monitoring dashboards
        run: |
          # Update Grafana annotations
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "text": "Production deployment: ${{ needs.build.outputs.version }}",
              "tags": ["deployment", "production"],
              "time": '$(($(date +%s) * 1000))'
            }' \
            https://grafana.materials-orchestrator.com/api/annotations

# ===============================================
# WORKFLOW CONFIGURATION
# ===============================================
concurrency:
  group: deployment-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  packages: write
  deployments: write
  issues: write