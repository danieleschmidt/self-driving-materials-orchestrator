# Dependency Update Workflow Template
# This file should be copied to .github/workflows/dependency-update.yml
#
# Automated dependency management with security and compatibility checks

name: Dependency Updates

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - security

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Check for dependency updates
  check-updates:
    name: Check for Updates
    runs-on: ubuntu-latest
    outputs:
      updates-available: ${{ steps.check.outputs.updates-available }}
      security-updates: ${{ steps.check.outputs.security-updates }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools pip-audit safety pur
        
    - name: Check for updates
      id: check
      run: |
        # Check for package updates
        pip-compile --upgrade --dry-run pyproject.toml > potential-updates.txt || true
        
        # Check for security updates
        pip-audit --format=json --output=security-audit.json || true
        safety check --json --output=safety-check.json || true
        
        # Determine if updates are available
        if [ -s potential-updates.txt ]; then
          echo "updates-available=true" >> $GITHUB_OUTPUT
        else
          echo "updates-available=false" >> $GITHUB_OUTPUT
        fi
        
        # Check for security updates
        if [ -s security-audit.json ] || [ -s safety-check.json ]; then
          echo "security-updates=true" >> $GITHUB_OUTPUT
        else
          echo "security-updates=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Upload check results
      uses: actions/upload-artifact@v3
      with:
        name: update-check-results
        path: |
          potential-updates.txt
          security-audit.json
          safety-check.json

  # Security updates (high priority)
  security-updates:
    name: Security Updates
    runs-on: ubuntu-latest
    needs: check-updates
    if: needs.check-updates.outputs.security-updates == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.DEPENDENCY_UPDATE_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools pip-audit safety
        
    - name: Download audit results
      uses: actions/download-artifact@v3
      with:
        name: update-check-results
        
    - name: Apply security updates
      run: |
        # Parse security audit results and update vulnerable packages
        python scripts/apply_security_updates.py \
          --audit-file security-audit.json \
          --safety-file safety-check.json \
          --requirements pyproject.toml
          
    - name: Compile updated requirements
      run: |
        pip-compile pyproject.toml
        
    - name: Test security updates
      run: |
        pip install -e ".[dev]"
        
        # Run critical tests
        pytest tests/unit/ --maxfail=5 -q
        pytest tests/integration/ --maxfail=3 -q
        
        # Re-run security scans to verify fixes
        pip-audit --format=json --output=updated-security-audit.json
        safety check --json --output=updated-safety-check.json
        
    - name: Create security update PR
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.DEPENDENCY_UPDATE_TOKEN }}
        commit-message: |
          security: update vulnerable dependencies
          
          - Updated packages with known security vulnerabilities
          - Verified fixes with security scanning tools
          - All critical tests passing
          
          Auto-generated by dependency update workflow
        title: "🔒 Security: Update vulnerable dependencies"
        body: |
          ## Security Dependency Updates
          
          This PR updates dependencies with known security vulnerabilities.
          
          ### Security Issues Addressed
          - Analyzed with pip-audit and safety
          - Updated packages with CVE fixes
          - Verified no new vulnerabilities introduced
          
          ### Testing
          - ✅ Unit tests passed
          - ✅ Integration tests passed  
          - ✅ Security scans clean
          
          ### Auto-merge
          This PR is eligible for auto-merge if all checks pass.
          
          **Priority**: High - Security updates
        branch: security/dependency-updates-${{ github.run_number }}
        labels: |
          security
          dependencies
          automated
        reviewers: |
          security-team
        assignees: |
          ${{ github.actor }}

  # Regular dependency updates (patch/minor)
  regular-updates:
    name: Regular Updates
    runs-on: ubuntu-latest
    needs: check-updates
    if: needs.check-updates.outputs.updates-available == 'true' && (github.event.inputs.update_type != 'security' || github.event_name == 'schedule')
    strategy:
      matrix:
        update-type: [patch, minor]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.DEPENDENCY_UPDATE_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools pur packaging requests
        
    - name: Apply ${{ matrix.update-type }} updates
      run: |
        # Use pur to update to latest patch/minor versions
        if [ "${{ matrix.update-type }}" == "patch" ]; then
          pur --patch --requirements pyproject.toml
        elif [ "${{ matrix.update-type }}" == "minor" ]; then
          pur --minor --requirements pyproject.toml
        fi
        
    - name: Compile updated requirements
      run: |
        pip-compile pyproject.toml
        
    - name: Install updated dependencies
      run: |
        pip install -e ".[dev]"
        
    - name: Run comprehensive tests
      run: |
        # Unit tests
        pytest tests/unit/ --cov=materials_orchestrator --cov-report=xml
        
        # Integration tests
        pytest tests/integration/ --cov=materials_orchestrator --cov-append --cov-report=xml
        
        # Compatibility tests
        python scripts/test_compatibility.py
        
        # Security scan after updates
        pip-audit --format=json --output=post-update-audit.json
        
    - name: Check for breaking changes
      run: |
        # Run API compatibility tests
        python scripts/check_api_compatibility.py
        
        # Check for deprecated features usage
        python scripts/check_deprecations.py
        
    - name: Create regular update PR
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.DEPENDENCY_UPDATE_TOKEN }}
        commit-message: |
          deps: update dependencies (${{ matrix.update-type }})
          
          - Updated to latest ${{ matrix.update-type }} versions
          - All tests passing
          - No breaking changes detected
          
          Auto-generated by dependency update workflow
        title: "⬆️ Dependencies: ${{ matrix.update-type }} updates"
        body: |
          ## Dependency Updates (${{ matrix.update-type }})
          
          This PR updates dependencies to their latest ${{ matrix.update-type }} versions.
          
          ### Updates Applied
          - Updated packages to latest ${{ matrix.update-type }} versions
          - Maintained backward compatibility
          - No breaking changes detected
          
          ### Testing
          - ✅ Unit tests passed
          - ✅ Integration tests passed
          - ✅ Compatibility tests passed
          - ✅ Security scans clean
          
          ### Review Required
          Please review the changes and ensure all functionality works as expected.
          
          **Priority**: Normal - Regular maintenance
        branch: deps/${{ matrix.update-type }}-updates-${{ github.run_number }}
        labels: |
          dependencies
          automated
          ${{ matrix.update-type }}
        draft: ${{ matrix.update-type == 'minor' }}

  # Major version updates (manual review required)
  major-updates:
    name: Major Updates
    runs-on: ubuntu-latest
    if: github.event.inputs.update_type == 'major'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.DEPENDENCY_UPDATE_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools pur packaging requests
        
    - name: Check for major updates
      run: |
        # Find packages with major version updates available
        pur --major --dry-run --requirements pyproject.toml > major-updates-available.txt
        
    - name: Create major update analysis
      run: |
        # Analyze each major update for breaking changes
        python scripts/analyze_major_updates.py \
          --updates-file major-updates-available.txt \
          --output major-update-analysis.md
          
    - name: Create major update issue
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.DEPENDENCY_UPDATE_TOKEN }}
        script: |
          const fs = require('fs');
          const analysis = fs.readFileSync('major-update-analysis.md', 'utf8');
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '📋 Major Dependency Updates Available',
            body: `## Major Dependency Updates Analysis
            
            The following major updates are available and require manual review:
            
            ${analysis}
            
            ### Next Steps
            1. Review each major update for breaking changes
            2. Update code to handle API changes if needed
            3. Run comprehensive tests including E2E tests
            4. Update documentation if required
            5. Create individual PRs for each major update
            
            ### Priority
            These updates should be reviewed and planned for the next development cycle.
            
            **Created by**: Dependency update workflow
            **Type**: Major version updates
            `,
            labels: ['dependencies', 'major-update', 'planning']
          });

  # Update lockfile maintenance
  lockfile-maintenance:
    name: Lockfile Maintenance
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.DEPENDENCY_UPDATE_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
        
    - name: Update lockfile
      run: |
        # Regenerate lockfile to get latest compatible versions
        pip-compile --upgrade pyproject.toml
        
    - name: Test lockfile update
      run: |
        pip install -e ".[dev]"
        
        # Quick smoke tests
        python -c "import materials_orchestrator; print('✅ Package import successful')"
        pytest tests/unit/ --maxfail=3 -q
        
    - name: Create lockfile update PR
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.DEPENDENCY_UPDATE_TOKEN }}
        commit-message: |
          maint: update dependency lockfile
          
          - Regenerated lockfile with latest compatible versions
          - Smoke tests passing
          - No version changes, just lock updates
          
          Auto-generated by dependency maintenance workflow
        title: "🔧 Maintenance: Update dependency lockfile"
        body: |
          ## Lockfile Maintenance
          
          This PR updates the dependency lockfile to ensure we're using the latest compatible versions within our specified constraints.
          
          ### Changes
          - Regenerated requirements.txt/poetry.lock
          - No version constraint changes
          - Updated to latest compatible versions
          
          ### Testing
          - ✅ Package imports successfully
          - ✅ Basic smoke tests passed
          
          This is a low-risk maintenance update.
        branch: maint/lockfile-update-${{ github.run_number }}
        labels: |
          maintenance
          dependencies
          automated

  # Cleanup old dependency update branches
  cleanup:
    name: Cleanup Old Branches
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.DEPENDENCY_UPDATE_TOKEN }}
        fetch-depth: 0
        
    - name: Cleanup old dependency branches
      run: |
        # Delete merged dependency update branches older than 7 days
        git for-each-ref --format='%(refname:short) %(committerdate)' refs/remotes/origin/deps/ refs/remotes/origin/security/ | \
        while read branch date rest; do
          if [[ $(date -d "$date" +%s) -lt $(date -d "7 days ago" +%s) ]]; then
            # Check if branch is merged
            if git merge-base --is-ancestor origin/$branch origin/main; then
              echo "Deleting merged branch: $branch"
              git push origin --delete ${branch#origin/}
            fi
          fi
        done

  # Summary report
  summary:
    name: Dependency Update Summary
    runs-on: ubuntu-latest
    needs: [check-updates, security-updates, regular-updates, major-updates, lockfile-maintenance]
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "## Dependency Update Summary" >> summary.md
        echo "" >> summary.md
        echo "**Run Date**: $(date)" >> summary.md
        echo "**Trigger**: ${{ github.event_name }}" >> summary.md
        echo "" >> summary.md
        
        if [[ "${{ needs.check-updates.outputs.security-updates }}" == "true" ]]; then
          echo "🔒 **Security Updates**: Available and processed" >> summary.md
        fi
        
        if [[ "${{ needs.check-updates.outputs.updates-available }}" == "true" ]]; then
          echo "⬆️ **Regular Updates**: Available and processed" >> summary.md
        fi
        
        if [[ "${{ needs.check-updates.outputs.updates-available }}" == "false" ]]; then
          echo "✅ **Status**: All dependencies up to date" >> summary.md
        fi
        
        echo "" >> summary.md
        echo "**Job Results**:" >> summary.md
        echo "- Security Updates: ${{ needs.security-updates.result }}" >> summary.md
        echo "- Regular Updates: ${{ needs.regular-updates.result }}" >> summary.md
        echo "- Major Updates: ${{ needs.major-updates.result }}" >> summary.md
        echo "- Lockfile Maintenance: ${{ needs.lockfile-maintenance.result }}" >> summary.md
        
    - name: Send summary to Slack
      uses: 8398a7/action-slack@v3
      if: github.event_name == 'schedule'
      with:
        status: custom
        channel: '#dependencies'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        custom_payload: |
          {
            text: "📦 Weekly Dependency Update Summary",
            attachments: [{
              color: "good",
              fields: [{
                title: "Repository",
                value: "${{ github.repository }}",
                short: true
              }, {
                title: "Security Updates",
                value: "${{ needs.check-updates.outputs.security-updates == 'true' && '🔒 Available' || '✅ None' }}",
                short: true
              }, {
                title: "Regular Updates", 
                value: "${{ needs.check-updates.outputs.updates-available == 'true' && '⬆️ Available' || '✅ Up to date' }}",
                short: true
              }]
            }]
          }