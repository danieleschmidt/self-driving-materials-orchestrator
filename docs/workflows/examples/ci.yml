# GitHub Actions CI Workflow Template
# This file should be copied to .github/workflows/ci.yml

name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ===============================================
  # CODE QUALITY AND LINTING
  # ===============================================
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run pre-commit hooks
        uses: pre-commit/action@v3.0.0

      - name: Run Ruff linting
        run: ruff check src/ tests/ --output-format=github

      - name: Run Black formatting check
        run: black --check src/ tests/

      - name: Run mypy type checking
        run: mypy src/

      - name: Run Bandit security scan
        run: bandit -r src/ -f json -o bandit-report.json

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: bandit-report.json

  # ===============================================
  # UNIT AND INTEGRATION TESTS
  # ===============================================
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,docs]"

      - name: Run unit tests
        run: |
          pytest tests/unit/ \
            --cov=materials_orchestrator \
            --cov-report=xml \
            --cov-report=html \
            --junit-xml=pytest-results.xml \
            -v

      - name: Run integration tests
        env:
          MONGODB_URL: mongodb://localhost:27017/test_materials_discovery
          REDIS_URL: redis://localhost:6379/1
        run: |
          pytest tests/integration/ \
            -m "not robot and not slow" \
            --junit-xml=integration-results.xml \
            -v

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            pytest-results.xml
            integration-results.xml
            htmlcov/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.python-version }}

  # ===============================================
  # PERFORMANCE BENCHMARKS
  # ===============================================
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pytest-benchmark

      - name: Run performance benchmarks
        run: |
          pytest tests/performance/ \
            --benchmark-json=benchmark-results.json \
            --benchmark-compare-fail=min:10% \
            -v

      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'pytest'
          output-file-path: benchmark-results.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  # ===============================================
  # SECURITY SCANNING
  # ===============================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: python

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # ===============================================
  # DOCUMENTATION BUILD
  # ===============================================
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"

      - name: Build documentation
        run: mkdocs build --strict

      - name: Check documentation links
        run: |
          pip install linkchecker
          linkchecker site/

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: site/

  # ===============================================
  # CONTAINER BUILD AND SCAN
  # ===============================================
  container:
    name: Container Build & Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: materials-orchestrator:ci
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'materials-orchestrator:ci'
          format: 'sarif'
          output: 'container-scan.sarif'

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'container-scan.sarif'

  # ===============================================
  # DEPENDENCY CHECKS
  # ===============================================
  dependencies:
    name: Dependency Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit

      - name: Check for known security vulnerabilities
        run: |
          safety check --json --output safety-report.json || true
          pip-audit --format=json --output=pip-audit-report.json || true

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-scan-results
          path: |
            safety-report.json
            pip-audit-report.json

  # ===============================================
  # TEST RESULTS SUMMARY
  # ===============================================
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint, test, benchmark, security, docs, container, dependencies]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate test summary
        run: |
          echo "## üß™ Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.lint.result }}" == "success" ]; then
            echo "‚úÖ Code Quality - Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Code Quality - Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "‚úÖ Test Suite - Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Test Suite - Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security.result }}" == "success" ]; then
            echo "‚úÖ Security Scan - Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Security Scan - Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.docs.result }}" == "success" ]; then
            echo "‚úÖ Documentation - Built Successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Documentation - Build Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.container.result }}" == "success" ]; then
            echo "‚úÖ Container Build - Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Container Build - Failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment PR with results
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync(process.env.GITHUB_STEP_SUMMARY, 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## CI Results\n\n${summary}`
            });

# ===============================================
# WORKFLOW CONFIGURATION
# ===============================================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  pull-requests: write
  checks: write